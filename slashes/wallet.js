const Blocks = require('../classes/Blocks');

module.exports = {
	data: {
		name: 'wallet',
		description_localizations: {
			'en-US': 'Fully centralized wallet!',
			//'ru': '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫!',
			'uk': '–ü–æ–≤–Ω—ñ—Å—Ç—é —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å!'
		},
		description: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫!',
		options: [
			{
		      type: 1,
		      name: 'view',
		      description_localizations: {
				'en-US': 'View wallet',
				//'ru': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—à–µ–ª—ë–∫',
				'uk': '–ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≥–∞–º–∞–Ω–µ—Ü—å'
			  },
		      description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—à–µ–ª—ë–∫',
		      options: [
		        {
		          type: 3,
		          name: '–∞–¥—Ä–µ—Å',
		          name_localizations: {
				  	'en-US': 'adress',
					//'ru': '–∞–¥—Ä–µ—Å',
					'uk': '–∞–¥—Ä–µ—Å'
			  	  },
		          description_localizations: {
				  	'en-US': 'Adress',
					//'ru': '–ê–¥—Ä–µ—Å',
					'uk': '–ê–¥—Ä–µ—Å'
			  	  },
		          description: '–ê–¥—Ä–µ—Å'
		        }
		      ]
		    },
		    {
		      type: 1,
		      name: 'send',
		      description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å DEL\'—ã',
		      options: [
		        {
		          type: 3,
		          name: '–∞–¥—Ä–µ—Å',
		          description: '–ê–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
		          required: true
		        },
		        {
		          type: 10,
		          name: '–∫–æ–ª-–≤–æ',
		          description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤',
		          required: true
		        }
		      ]
		    },
		    {
		    	type: 2,
		    	name: 'market',
		    	description: '–ú–∞–≥–∞–∑–∏–Ω',
		    	options: [
		    		{
		    			type: 1,
		    			name: 'view',
		    			description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω'
		    		},
		    		{
		    			type: 1,
		    			name: 'buy',
		    			description: '–ö—É–ø–∏—Ç—å DEL\'—ã',
		    			options: [
		    				{
		        				type: 10,
		        				name: '–∫–æ–ª-–≤–æ',
		        				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤',
		        				required: true
		        			}
		    			]
		    		},
		    		{
		    			type: 1,
		    			name: 'sell',
		    			description: '–ü—Ä–æ–¥–∞—Ç—å DEL\'—ã',
		    			options: [
		    				{
		        				type: 10,
		        				name: '–∫–æ–ª-–≤–æ',
		        				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤',
		        				required: true
		        			}
		    			]
		    		}
		    	]
		    }
		]
	},
	async run(bot, interaction){
		try {
		const emb = new bot.Embed({color: 16777215, author: {name: '–ö–æ—à–µ–ª—ë–∫', iconURL: 'https://images.emojiterra.com/google/android-pie/512px/1f4b3.png'}}).setTimestamp();
		await interaction.reply({content: util.consts.replies[~~(Math.random() * util.consts.replies.length)]});
		if(interaction.options._subcommand === 'view' && !interaction.options._group){

			let userwallet = await bot.db.wallet.findOne({id: interaction.user.id});
			if(!userwallet) {
				const adress = Blocks.generateHash(~~(Math.random() * 10000), ~~(Math.random() * 10000), new Date());
				let balance = await bot.db.blockchain.find({'data.to': adress});

				balance = balance[0] ? balance.reduce((a, b) => a + b.data.amount, 0) : 0;
				userwallet = await bot.db.wallet.create({id: interaction.user.id, adress, balance});
			}

			const adress = interaction.options.getString('–∞–¥—Ä–µ—Å');

			if(adress && adress.length !== 64) return interaction.editReply({embeds: [emb.setDescription('–î–ª–∏–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è **`64`** —Å–∏–º–≤–æ–ª–∞–º.')]})
			const prices = await bot.db.price.findOne();
			const wallet = await bot.db.wallet.findOne({adress}) || userwallet;
			const is = adress && adress !== wallet.adress;
			const transactions = [...(await bot.db.blockchain.find({'data.from': is ? adress : wallet.adress}))
			, ...(await bot.db.blockchain.find({'data.to': is ? adress : wallet.adress}))]
			.sort((a, b) => a.index > b.index);

			if(is) {
				wallet.id = null
				wallet.adress = adress;
				wallet.balance = transactions[0] ? transactions.reduce((a,b) => a + b.data.amount, 0):0;
			}
			const transText = transactions.map(x => `**\`${x.data.amount}\`** - [${x.data.from === wallet.adress ? '–≠—Ç–æ—Ç' : (x.data.from === 'projectd' ? '–°–∏—Å—Ç–µ–º–∞' : x.data.from.slice(0, 10)+'...')}](https://google.com "${x.data.from === 'projectd' ? 'ProjectD' : x.data.from}") => [${x.data.to === 'projectd' ? '–°–∏—Å—Ç–µ–º–∞': (x.data.to === wallet.adress ? '–≠—Ç–æ—Ç' : x.data.to.slice(0, 10)+'...')}](https://google.com "${x.data.to}")`);
			emb.setFooter({text: wallet.balance ? `${~~(wallet.balance * (prices.balance / prices.tokens))} ¬•` : `0 ¬•`}).setDescription(`üè∑Ô∏è **–ê–¥—Ä–µ—Å**: **\`${wallet.adress}\`**\n<:del:960830471581892638> **–ë–∞–ª–∞–Ω—Å**: **\`${wallet.balance}\`**\n**üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏** [**\`${transactions.length}\`**]:\n${transText.join('\n')||'–ù–µ—Ç—É'}`)

			return interaction.editReply({content: null, embeds: [emb], ephemeral: true})
		} else if(interaction.options._subcommand === 'send'){
			let pressed = false;
			const adress = interaction.options.getString('–∞–¥—Ä–µ—Å');
			const amount = interaction.options.getNumber('–∫–æ–ª-–≤–æ');
			let wallet = await bot.db.wallet.findOne({id: interaction.user.id});

			if(!wallet) {
				const adr = Blocks.generateHash(~~(Math.random() * 10000), ~~(Math.random() * 10000), new Date());
				let balance = await bot.db.blockchain.find({'data.to': adr});

				balance = balance[0] ? balance.reduce((a, b) => a + b.data.amount, 0) : 0;
				wallet = await bot.db.wallet.create({id: interaction.user.id, adress: adr, balance});
			}

			if(wallet.adress === adress) return interaction.editReply({content: null, embeds: [emb.setDescription('–≠—Ç–æ –∂–µ **–≤–∞—à** –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞...')]});
			const walletTo = await bot.db.wallet.findOne({adress});

			if(adress.length !== 64) return interaction.editReply({content: null, embeds: [emb.setDescription('–î–ª–∏–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è **`64`** —Å–∏–º–≤–æ–ª–∞–º.')]})
			if(amount < 0.0001) return interaction.editReply({content: null, embeds: [emb.setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - **`0.0001`**')]});
			if(wallet.balance < amount) return interaction.editReply({content: null, embeds: [emb.setDescription('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DEL\'–æ–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')]});
			
			const filter = i => ['accept', 'decline'].includes(i.customId) && i.user.id === interaction.user.id || i.deferUpdate();
			
			const buttons = new Discord.ActionRowBuilder({
				components: [new Discord.ButtonBuilder({customId: 'decline', label: '–û—Ç–º–µ–Ω–∏—Ç—å', style: 'DANGER'}),
							new Discord.ButtonBuilder({customId: 'accept', label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', style: 'SUCCESS'})]
			})
			await interaction.editReply({components: [buttons], content: null, embeds: [emb.setTitle('–û—Ç–ø—Ä–∞–≤–∫–∞ DEL\'–æ–≤').setDescription(`**–ë–∞–ª–∞–Ω—Å**: **\`${wallet.balance}\`**\n**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ**: **\`${amount}\`**\n**–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ**: **\`${wallet.balance-amount}\`**\n**–í–∞—à –∞–¥—Ä–µ—Å**:\n**\`${wallet.adress}\`**\n**–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è**:\n **\`${adress}\`**\n\n**–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DEL'—ã –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç.**`)]})
			const collector = interaction.channel.createMessageComponentCollector({filter, timeout: 90000});
			collector.on('collect', async i => {
				await ({
					async accept(){
						pressed = true;
						await interaction.editReply({components: [], embeds: [emb.setDescription('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')]});
						await sleep(3000);
						wallet.balance -= amount;
						if(walletTo) walletTo.balance += amount;
						const data = {
							timestamp: new Date(),
							data: {
								amount,
								from: wallet.adress,
								to: adress
							}
						};
						if(walletTo) await walletTo.save();
						await wallet.save();
						const block = await Blocks.generateNext(data);
						await bot.db.blockchain.create(block);
						emb.setDescription(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n**–ö–æ–ª-–≤–æ DEL'–æ–≤**: **\`${amount}\`**\n**Hash –±–ª–æ–∫–∞**:\n**\`${block.hash}\`**`)
						await interaction.editReply({embeds: [emb]});
						collector.stop();
					},
					async decline(){
						pressed = true;
						emb.setDescription(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
						await interaction.editReply({components: [], embeds: [emb]});
						collector.stop();
					}
				})[i.customId]();
			});
			collector.on('end', () => {
				if(!pressed) interaction.editReply({components: [], embeds: [emb.setDescription('–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')]})
			})
		 } else if(interaction.options._group === 'market' && interaction.options._subcommand === 'view'){

		 	const prices = await bot.db.price.findOne();
			const delPrice = prices.balance / prices.tokens;
			emb.setAuthor({name: '–ú–∞–≥–∞–∑–∏–Ω', iconURL: 'https://images.emojiterra.com/twitter/512px/1f3ea.png'})
			.setDescription(`**–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è**: **\`${prices.balance}\`** ¬•\n**–û—Å—Ç–∞–≤—à–∏–µ—Å—è DEL'—ã**: **\`${prices.tokens}\`**\n**–ö—É—Ä—Å** **\`1\`** <:del:960830471581892638> –∫ **\`${~~delPrice}\`** ¬•`)

		 	return interaction.editReply({content: null, embeds: [emb]})
		 } else if(interaction.options._subcommand === 'buy'){
			let wallet = await bot.db.wallet.findOne({id: interaction.user.id});
			const user = await bot.db.user.findOne({id: interaction.user.id});
			const amount = interaction.options.getNumber('–∫–æ–ª-–≤–æ');
			if(!wallet) {
				const adr = Blocks.generateHash(~~(Math.random() * 10000), ~~(Math.random() * 10000), new Date());
				let balance = await bot.db.blockchain.find({'data.to': adr});

				balance = balance[0] ? balance.reduce((a, b) => a + b.data.amount, 0) : 0;
				wallet = await bot.db.wallet.create({id: interaction.user.id, adress: adr, balance});
			}

			if(amount < 0.0001) return interaction.editReply({content: null, embeds: [emb.setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - **`0.0001`**')]});

			const prices = await bot.db.price.findOne();
			const delPrice = prices.balance / prices.tokens;

			
			const filter = i => ['accept', 'decline'].includes(i.customId) && i.user.id === interaction.user.id || i.deferUpdate();
			
			const buttons = new Discord.ActionRowBuilder({
				components: [new Discord.ButtonBuilder({customId: 'decline', label: '–û—Ç–º–µ–Ω–∏—Ç—å', style: 'DANGER'}),
							new Discord.ButtonBuilder({customId: 'accept', label: '–ö—É–ø–∏—Ç—å', style: 'SUCCESS'})]
			})
			await interaction.editReply({components: [buttons], content: null, embeds: [emb.setFooter({text: `–ë–∞–ª–∞–Ω—Å: ${user.money} ¬•`}).setTitle('–ü–æ–∫—É–ø–∫–∞ DEL\'–æ–≤').setDescription(`**–ö—É—Ä—Å** **\`1\`** <:del:960830471581892638> –∫ **\`${~~delPrice}\`** ¬•\n\n–¶–µ–Ω–∞ –∑–∞ **\`${amount}\`** <:del:960830471581892638>: **\`${~~(delPrice*amount)}\`** ¬•\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ DEL'–æ–≤?`)]})
			const collector = interaction.channel.createMessageComponentCollector({filter, timeout: 90000});
			collector.on('collect', async i => {
				await ({
					async accept(){
						pressed = true;
						
						await interaction.editReply({components: [], embeds: [emb.setDescription('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')]});
						
						if(user.money < ~~(amount*delPrice)) return await interaction.editReply({components: [], embeds: [emb.setDescription('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')]});
						await sleep(3000);
						user.money -= ~~(amount*delPrice);
						wallet.balance += amount;
						prices.balance += ~~(amount*delPrice);
						prices.tokens -= amount;
						
						const data = {
							timestamp: new Date(),
							data: {
								amount,
								from: 'projectd',
								to: wallet.adress
							}
						};
						
						const block = await Blocks.generateNext(data);

						await wallet.save();
						await user.save();
						await prices.save();
						await bot.db.blockchain.create(block);
						
						emb.setFooter({text: `–ë–∞–ª–∞–Ω—Å: ${user.money} ¬•`}).setDescription(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n**–ö–æ–ª-–≤–æ DEL'–æ–≤**: **\`${amount}\`**\n**Hash –±–ª–æ–∫–∞**:\n**\`${block.hash}\`**`)
						
						await interaction.editReply({embeds: [emb]});
						collector.stop();
					},
					async decline(){
						pressed = true;
						await interaction.editReply({components: [], embeds: [emb.setDescription(`–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`)]});
						collector.stop();
					} 
				})[i.customId]();
			});
			collector.on('end', () => {
				if(!pressed) interaction.editReply({components: [], embeds: [emb.setDescription('–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')]})
			})
		} else if(interaction.options._subcommand === 'sell'){
			let wallet = await bot.db.wallet.findOne({id: interaction.user.id});
			const user = await bot.db.user.findOne({id: interaction.user.id});
			const amount = interaction.options.getNumber('–∫–æ–ª-–≤–æ');
			if(!wallet) {
				const adr = Blocks.generateHash(~~(Math.random() * 10000), ~~(Math.random() * 10000), new Date());
				let balance = await bot.db.blockchain.find({'data.to': adr});

				balance = balance[0] ? balance.reduce((a, b) => a + b.data.amount, 0) : 0;
				wallet = await bot.db.wallet.create({id: interaction.user.id, adress: adr, balance});
			}

			if(amount < 0.0001) return interaction.editReply({content: null, embeds: [emb.setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DEL\'–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - **`0.0001`**')]});

			const prices = await bot.db.price.findOne();
			const delPrice = prices.balance / prices.tokens;

			
			const filter = async i => ['accept', 'decline'].includes(i.customId) && i.user.id === interaction.user.id ? true : await i.deferUpdate();
			
			const buttons = new Discord.ActionRowBuilder({
				components: [new Discord.ButtonBuilder({customId: 'decline', label: '–û—Ç–º–µ–Ω–∏—Ç—å', style: 'DANGER'}),
							new Discord.ButtonBuilder({customId: 'accept', label: '–ö—É–ø–∏—Ç—å', style: 'SUCCESS'})]
			})
			await interaction.editReply({components: [buttons], content: null, embeds: [emb.setFooter({text: `DEL'–æ–≤: ${wallet.balance}`}).setTitle('–ü—Ä–æ–¥–∞–∂–∞ DEL\'–æ–≤').setDescription(`**–ö—É—Ä—Å** **\`1\`** <:del:960830471581892638> –∫ **\`${~~delPrice}\`** ¬•\n\n–¶–µ–Ω–∞ –∑–∞ **\`${amount}\`** <:del:960830471581892638>: **\`${~~(delPrice*amount)}\`** ¬•\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ DEL'–æ–≤?`)]})
			const collector = interaction.channel.createMessageComponentCollector({filter, timeout: 90000});
			collector.on('collect', async i => {
				await ({
					async accept(){
						pressed = true;
						
						await interaction.editReply({components: [], embeds: [emb.setDescription('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')]});
						
						if(wallet.balance < amount) return await interaction.editReply({components: [], embeds: [emb.setDescription('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')]});
						await sleep(3000);
						user.money += ~~(amount*delPrice);
						wallet.balance -= amount;
						prices.balance -= ~~(amount*delPrice);
						prices.tokens += amount;
						
						const data = {
							timestamp: new Date(),
							data: {
								amount,
								from: wallet.adress,
								to: 'projectd'
							}
						};
						
						const block = await Blocks.generateNext(data);

						await wallet.save();
						await user.save();
						await prices.save();
						await bot.db.blockchain.create(block);
						
						emb.setFooter({text: `DEL'–æ–≤: ${wallet.balance}`}).setDescription(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n**–ö–æ–ª-–≤–æ DEL'–æ–≤**: **\`${amount}\`**\n**Hash –±–ª–æ–∫–∞**:\n**\`${block.hash}\`**`)
						
						await interaction.editReply({embeds: [emb]});
						collector.stop();
					},
					async decline(){
						pressed = true;
						await interaction.editReply({components: [], embeds: [emb.setDescription(`–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`)]});
						collector.stop();
					}
				})[i.customId]()
			})
			collector.on('end', () => {
				if(!pressed) interaction.editReply({components: [], embeds: [emb.setDescription('–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')]})
			})
		}
	} catch (e){console.log(e)}
	}
}
