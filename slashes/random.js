module.exports = {
	data: {
		name: 'random',
		description: '–í—Å—è–∫–∏–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —à—Ç—É—á–∫–∏',
		options: [
			{
				type: 1,
		      	name: 'number',
		      	description: '–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ',
		      	options: [
		        	{
		        		type: 10,
		          		name: '–¥–æ',
		          		description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ',
		          		required: true
		        	},
		        	{
		        		type: 10,
		          		name: '–æ—Ç',
		          		description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ'
		        	}
		      	]
			},
			{
				type: 1,
		      	name: 'dice',
		      	description: '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫',
		      	options: [
		        	{
		        		type: 10,
		          		name: '–≥—Ä–∞–Ω–∏',
		          		description: '–ß–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π'
		        	},
		        	{
		        		type: 10,
		          		name: '–±—Ä–æ—Å–∫–∏',
		          		description: '–ö–æ–ª-–≤–æ –±—Ä–æ—Å–∫–æ–≤'
		        	}
		      	]
			}
		]
	},
	async run(bot, interaction){
		if(interaction.options._subcommand === 'number'){
			const min = ~~interaction.options.getNumber('–æ—Ç')||0, max = ~~interaction.options.getNumber('–¥–æ')||10;
			const rand = ~~(Math.random() * max) + min;
			const e = new bot.Embed({color: 16777215,
			 description: min === max ? `üî¢ –ù—É —Ç—É—Ç –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ **\`${min}\`**!` : `üî¢ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: **\`${min}\`**`,
			});
			return interaction.reply({embeds: [e]});
		} else {
			let sides = ~~interaction.options.getNumber('–≥—Ä–∞–Ω–∏')||6, tries = ~~interaction.options.getNumber('–±—Ä–æ—Å–∫–∏')||1;
			if(sides < 1) sides = 6
				else if(sides > 120) sides = 120;
			if(tries < 1) tries = 1
				else if(tries > 50) tries = 50;
			const dc = Array.from({length: tries}, () => ~~(Math.random() * sides))
			const e = new bot.Embed({color: 16777215,
			 description: `üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–∏ [**\`${tries}\`**/**\`${sides}\`**]:${tries > 1 ? `\n\`\`\`${dc.join(', ')}\`\`\`` : ` **\`${dc[0]}\`**`}`,
			});
			return interaction.reply({embeds: [e]});
		}
	}
}
